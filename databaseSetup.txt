Files needed for the setup: 

Program.cs

**
public class Program{

public static void Main (string[] args){
    //creating the context
    using var context = new GitInsightContext();
}
**

Context.cs (name the context something relevant)
**
    public partial class Context : DbContext
    {

    public Context(){}
    public Context(DbContextOptions<Context> options)
        : base(options)
    { }

    public virtual DbSet<An entity to the database> Entity { get; set; } = null!;

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder){

        if(!optionsBuilder.IsConfigured){
        var configuration = new ConfigurationBuilder().AddUserSecrets<Context>().
        Build();
        var connectionString = configuration.GetConnectionString("name of the database");
        optionsBuilder.UseNpgsql(connectionString);
        }
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<An entity>().Property(e => e.Date).HasConversion<string>();
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

    public void Clear()
    {
     
    }
}
**

MyEntityClass.cs 
**
public class MyEntityClass {

    public int Id {get;set;}
}
**


To setup the connection to the database:

From commandLine:
1. create variable 'password', a password you want or an autogenerated one like the one below:
password=$(uuidgen)

2. create varibale 'database', the name of the database you want to use
database="gitinsight"    

3. create varibale connectionString
connectionString="Host=localhost;Username=postgres;Password=$password;Database=$database"

4. init user secrets. Stand in the folder where the context is
dotnet user-secrets init
dotnet user-secrets set "ConnectionStrings:$database" "$connectionString"

5. run the database with docker
docker run --name $database -e POSTGRES_PASSWORD=$password -d -p 5432:5432 postgres

6. add migrations should say something and the done
dotnet ef migrations add initialcreate

7. update the database according to the new migrations. Should also end with done
dotnet ef database update

8. take a look a docker to see the id of the container running i.e the $containerId
docker ps

9. to check if it works 
docker exec -it $containerId bash

10. switch to the postgres user
su postgres

11. type psql to write sql in commandLine
psql

12. check a list of Databases
check if your database is there. If not is has not been created correctly
should return something like this: 

Name     |  Owner   | Encoding |  Collate   |   Ctype    | ICU Locale | Locale Provider |   Access privileges   
--------------+----------+----------+------------+------------+------------+-----------------+-----------------------
 gitInsightDB | postgres | UTF8     | en_US.utf8 | en_US.utf8 |            | libc            | 
 postgres     | postgres | UTF8     | en_US.utf8 | en_US.utf8 |            | libc            | 
 template0    | postgres | UTF8     | en_US.utf8 | en_US.utf8 |            | libc            | =c/postgres          +
              |          |          |            |            |            |                 | postgres=CTc/postgres
 template1    | postgres | UTF8     | en_US.utf8 | en_US.utf8 |            | libc            | =c/postgres          +
              |          |          |            |            |            |                 | postgres=CTc/postgres
(4 rows)


12. check columns of the database
\d


What goes wrong?
1. Is postgres already running it might already use the default port. To stop it run:
brew services stop postgresql
(Remember to run brew services start postgresql for Introduction to Databases class)

2. check the user-secrets in commandLine
dotnet user-secrets list

3. to clear the user-secrets
dotnet user-secrets clear

4. Always check if you are in the right folder. 
The migrations should be in the same folder as the context