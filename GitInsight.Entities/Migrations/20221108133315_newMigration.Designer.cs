// <auto-generated />
using System;
using GitInsight.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GitInsight.Entities.Migrations
{
    [DbContext(typeof(GitInsightContext))]
    [Migration("20221108133315_newMigration")]
    partial class newMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GitInsight.Entities.AnalyzedRepo", b =>
                {
                    b.Property<string>("RepositoryIdString")
                        .HasColumnType("text");

                    b.Property<DateTime>("State")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RepositoryIdString");

                    b.ToTable("AnalyzedRepos");
                });

            modelBuilder.Entity("GitInsight.Entities.DataCommit", b =>
                {
                    b.Property<string>("StringId")
                        .HasColumnType("text");

                    b.Property<string>("AnalyzedRepoRepositoryIdString")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("StringId");

                    b.HasIndex("AnalyzedRepoRepositoryIdString");

                    b.ToTable("DataCommits");
                });

            modelBuilder.Entity("GitInsight.Entities.DataCommit", b =>
                {
                    b.HasOne("GitInsight.Entities.AnalyzedRepo", null)
                        .WithMany("CommitsInRepo")
                        .HasForeignKey("AnalyzedRepoRepositoryIdString");
                });

            modelBuilder.Entity("GitInsight.Entities.AnalyzedRepo", b =>
                {
                    b.Navigation("CommitsInRepo");
                });
#pragma warning restore 612, 618
        }
    }
}
